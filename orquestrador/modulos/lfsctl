#!/usr/bin/env bash
# lfsctl — CLI da suíte LFS/BLFS (Módulo 1 + 2)
set -euo pipefail

: "${LFS_RUNTIME:=/usr/local/lib/lfs}"
# shellcheck source=/usr/local/lib/lfs/common.sh
. "${LFS_RUNTIME}/common.sh"
# shellcheck source=/usr/local/lib/lfs/downloader.sh
. "${LFS_RUNTIME}/downloader.sh"

VERSION="1.1.0"

usage() {
  cat <<'USAGE'
lfsctl 1.1.0
Uso: lfsctl <comando> [opções]

Comandos estáveis (Módulo 1):
  version                     Mostra versão
  init                        Cria diretórios padrão e config inicial
  doctor                      Verifica dependências do ambiente
  status                      Mostra resumo de configuração/paths
  logs [N]                    Mostra as últimas N linhas de log (default 200)
  log-demo                    Gera entradas de log de teste
  lock test [NAME]            Testa aquisição de lock (default: example)
  config print                Exibe config efetiva
  config set KEY=VAL [...]    Atualiza/insere chaves no /etc/lfs/config

Comandos (Módulo 2 — Downloader & Cache):
  fetch url <URL> --sha256 HEX [--sig SIG] [--outdir DIR] [--name FILENAME]
  fetch list <FILE> [--parallel N] [--outdir DIR]
  fetch git --url URL --ref REF --name NAME [--outdir DIR]
  verify <FILE> --sha256 HEX [--sig SIGFILE] [--keyring DIR]
  cache ls [sources|tarballs|git]
  cache clean [sources|tarballs|git|all]

Observações:
  - 'fetch list' aceita linhas: name|url|sha256|[sig]
  - Mirrors podem ser configurados via LFS_MIRRORS="https://espelho1 https://espelho2"
  - Keyring GPG em /etc/lfs/keys (ou LFS_KEYS_DIR)

Exemplos:
  sudo lfsctl init
  lfsctl doctor
  lfsctl fetch url https://zlib.net/zlib-1.3.1.tar.xz --sha256 deadbeef... --sig https://zlib.net/zlib-1.3.1.tar.xz.asc
  lfsctl fetch list sources.txt --parallel 8
  lfsctl fetch git --url https://github.com/mirror/musl --ref v1.2.5 --name musl
  lfsctl verify /var/cache/lfs/sources/zlib-1.3.1.tar.xz --sha256 deadbeef...
  lfsctl cache ls sources
USAGE
}

#-------------------------
# Comandos Módulo 1 (inalterados)
#-------------------------
cmd_version() { echo "lfsctl ${VERSION}"; }
cmd_init()    { assert_root; log_info "Inicializando..."; bootstrap_runtime; log_ok "OK."; print_env_summary | sed 's/^/  - /'; }
cmd_doctor()  { bootstrap_runtime; log_info "Verificando dependências..."; if doctor_checks; then log_ok "Ambiente OK."; else log_error "Dependências faltantes."; exit 2; fi; }
cmd_status()  { bootstrap_runtime; echo "== STATUS =="; print_env_summary; echo; echo "Locks: ${LFS_LOCK_DIR}"; echo "DB: ${LFS_DB_DIR}"; echo "Receitas: ${LFS_RECIPES_DIR}"; echo "Logs: ${LFS_LOG_FILE}"; }
cmd_logs()    { bootstrap_runtime; tail_logs "${1:-200}"; }
cmd_log_demo(){ bootstrap_runtime; log_info "Info"; log_ok "OK"; log_warn "Warn"; log_error "Erro"; log_debug "Debug"; echo "Log: ${LFS_LOG_FILE}"; }
cmd_lock_test(){ bootstrap_runtime; local name="${1:-example}"; log_info "Lock ${name}"; with_flock "${name}" 5 bash -c 'sleep 1'; log_ok "Lock ok"; }
cmd_config_print(){ bootstrap_runtime; echo "# Config efetiva"; print_env_summary; echo; echo "# Arquivos:"; echo "  - ${LFS_DEFAULT_CONFIG_FILE}"; if compgen -G "${LFS_ETC_D}/*.conf" >/dev/null; then for cf in "${LFS_ETC_D}"/*.conf; do echo "  - ${cf}"; done; else echo "  - (sem overrides)"; fi; }
cmd_config_set(){ assert_root; bootstrap_runtime; [[ "$#" -ge 1 ]] || die 2 "Uso: lfsctl config set KEY=VAL [...]"; local kv key val; touch "${LFS_DEFAULT_CONFIG_FILE}"; chmod 0644 "${LFS_DEFAULT_CONFIG_FILE}"; for kv in "$@"; do [[ "$kv" =~ ^[A-Za-z_][A-Za-z0-9_]*= ]] || die 2 "Par inválido: ${kv}"; key="${kv%%=*}"; val="${kv#*=}"; if grep -qE "^${key}=" "${LFS_DEFAULT_CONFIG_FILE}"; then sed -i -E "s|^${key}=.*|${key}=${val}|g" "${LFS_DEFAULT_CONFIG_FILE}"; else echo "${key}=${val}" >> "${LFS_DEFAULT_CONFIG_FILE}"; fi; log_ok "${key}=${val}"; done; }

#-------------------------
# Comandos Módulo 2
#-------------------------
cmd_fetch_url() {
  dl_bootstrap
  local url sha sig="" outdir="${LFS_CACHE}/sources" name=""
  # parse args
  [[ "${1:-}" =~ ^https?:// ]] || die 2 "Uso: lfsctl fetch url <URL> --sha256 HEX [--sig SIG] [--outdir DIR] [--name FILENAME]"
  url="$1"; shift
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --sha256) sha="$2"; shift 2 ;;
      --sig)    sig="$2"; shift 2 ;;
      --outdir) outdir="$2"; shift 2 ;;
      --name)   name="$2"; shift 2 ;;
      *) die 2 "Parâmetro inválido: $1" ;;
    esac
  done
  [[ -n "${sha:-}" ]] || die 2 "Falta --sha256"
  local fname
  if [[ -n "${name}" ]]; then fname="${name}"; else fname="$(basename -- "$url")"; fi
  local out="${outdir}/${fname}"
  with_flock "fetch" 600 bash -c '
    dl_fetch_one "'"${fname}"'" "'"${url}"'" "'"${sha}"'" "'"${sig}"'" "'"${outdir}"'" >/dev/null
  '
  echo "${out}"
}

cmd_fetch_list() {
  dl_bootstrap
  local list="${1:-}"; shift || true
  [[ -n "${list}" ]] || die 2 "Uso: lfsctl fetch list <FILE> [--parallel N] [--outdir DIR]"
  local parallel="$(effective_jobs)" outdir="${LFS_CACHE}/sources"
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --parallel) parallel="$2"; shift 2 ;;
      --outdir)   outdir="$2"; shift 2 ;;
      *) die 2 "Parâmetro inválido: $1" ;;
    esac
  done
  with_flock "fetch" 3600 bash -c '
    dl_fetch_list "'"${list}"'" "'"${outdir}"'" "'"${parallel}"'"
  '
}

cmd_fetch_git() {
  dl_bootstrap
  local url="" ref="" name="" outdir="${LFS_CACHE}/tarballs"
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --url) url="$2"; shift 2 ;;
      --ref) ref="$2"; shift 2 ;;
      --name) name="$2"; shift 2 ;;
      --outdir) outdir="$2"; shift 2 ;;
      *) die 2 "Uso: lfsctl fetch git --url URL --ref REF --name NAME [--outdir DIR]" ;;
    esac
  done
  [[ -n "${url}" && -n "${ref}" && -n "${name}" ]] || die 2 "Faltam --url/--ref/--name"
  local out
  with_flock "git-archive" 3600 bash -c '
    dl_git_archive --url "'"${url}"'" --ref "'"${ref}"'" --name "'"${name}"'" --outdir "'"${outdir}"'"
  ' | { read -r out; echo "${out}"; }
}

cmd_verify() {
  dl_bootstrap
  local file sha sig="" keyring="${LFS_KEYS_DIR}"
  [[ -n "${1:-}" ]] || die 2 "Uso: lfsctl verify <FILE> --sha256 HEX [--sig SIGFILE] [--keyring DIR]"
  file="$1"; shift
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --sha256) sha="$2"; shift 2 ;;
      --sig)    sig="$2"; shift 2 ;;
      --keyring) keyring="$2"; shift 2 ;;
      *) die 2 "Parâmetro inválido: $1" ;;
    esac
  done
  [[ -f "${file}" ]] || die 2 "Arquivo não encontrado: ${file}"
  [[ -n "${sha:-}" ]] || die 2 "Falta --sha256"
  dl_verify_sha256 "${file}" "${sha}"
  if [[ -n "${sig}" ]]; then
    [[ -f "${sig}" ]] || die 2 "Assinatura não encontrada: ${sig}"
    dl_verify_gpg "${file}" "${sig}" "${keyring}"
  fi
}

cmd_cache_ls() {
  dl_bootstrap
  local which="${1:-all}"
  case "${which}" in
    all)      printf "sources:\n"; ls -1 "${LFS_CACHE}/sources" 2>/dev/null || true; printf "\n tarballs:\n"; ls -1 "${LFS_CACHE}/tarballs" 2>/dev/null || true; printf "\n git:\n"; ls -1 "${LFS_CACHE}/git" 2>/dev/null || true ;;
    sources)  ls -lh "${LFS_CACHE}/sources" 2>/dev/null || true ;;
    tarballs) ls -lh "${LFS_CACHE}/tarballs" 2>/dev/null || true ;;
    git)      ls -lh "${LFS_CACHE}/git" 2>/dev/null || true ;;
    *) die 2 "cache ls [sources|tarballs|git|all]" ;;
  esac
}

cmd_cache_clean() {
  assert_root
  dl_bootstrap
  local which="${1:-all}"
  case "${which}" in
    all)      rm -rf "${LFS_CACHE}/sources"/* "${LFS_CACHE}/tarballs"/* "${LFS_CACHE}/git"/* 2>/dev/null || true ;;
    sources)  rm -rf "${LFS_CACHE}/sources"/* 2>/dev/null || true ;;
    tarballs) rm -rf "${LFS_CACHE}/tarballs"/* 2>/dev/null || true ;;
    git)      rm -rf "${LFS_CACHE}/git"/* 2>/dev/null || true ;;
    *) die 2 "cache clean [sources|tarballs|git|all]" ;;
  esac
  log_ok "Cache limpo: ${which}"
}

#-------------------------
# Dispatcher
#-------------------------
main() {
  local cmd="${1:-}"; shift || true
  case "${cmd}" in
    ""|-h|--help|help) usage ;;
    # Módulo 1
    version)           cmd_version ;;
    init)              cmd_init ;;
    doctor)            cmd_doctor ;;
    status)            cmd_status ;;
    logs)              cmd_logs "${1:-}" ;;
    log-demo|logdemo)  cmd_log_demo ;;
    lock)              case "${1:-}" in test) shift; cmd_lock_test "${1:-example}";; *) usage; exit 2;; esac ;;
    config)            case "${1:-}" in print) shift; cmd_config_print ;; set) shift; cmd_config_set "$@" ;; *) usage; exit 2 ;; esac ;;
    # Módulo 2
    fetch)
      case "${1:-}" in
        url)  shift; cmd_fetch_url "$@" ;;
        list) shift; cmd_fetch_list "$@" ;;
        git)  shift; cmd_fetch_git "$@" ;;
        *) usage; exit 2 ;;
      esac
      ;;
    verify)            cmd_verify "$@" ;;
    cache)
      case "${1:-}" in
        ls)    shift; cmd_cache_ls "${1:-all}" ;;
        clean) shift; cmd_cache_clean "${1:-all}" ;;
        *) usage; exit 2 ;;
      esac
      ;;
    *)
      log_error "Comando desconhecido: ${cmd}"
      usage
      exit 2
      ;;
  esac
}

main "$@"
